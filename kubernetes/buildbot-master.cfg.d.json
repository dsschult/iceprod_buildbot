{
    "apiVersion": "v1",
    "data": {
        "__init__.py": "from __future__ import print_function\n\nimport os\nimport platform\n\nfrom buildbot.plugins import *\n\n\ndef get_os():\n    d = platform.linux_distribution()\n    os = d[0].lower()\n    if os not in ('ubuntu','debian','centos'):\n        if 'red hat' in os:\n            os = 'centos'\n        else:\n            raise Exception('unknown os: '+os)\n    ver = d[1].lower().split('/')[-1]\n    if os == 'centos':\n        ver = ver.split('.')[0]\n    try:\n        float(ver)\n    except:\n        return os+'_'+ver\n    else:\n        return os+ver\n\n\nclass WriteOnceDict(dict):\n    def __setitem__(self, key, value):\n        if key in self:\n            raise KeyError('{} has already been set'.format(key))\n        super(WriteOnceDict, self).__setitem__(key, value)\n\nclass Config(dict):\n    \"\"\"\n    A Config object, holding the setup for a BuildBot config.\n\n    Provide a setup function\n    \"\"\"\n    def __init__(self, setup=None):\n        self['change_source'] = WriteOnceDict()\n        self['workers'] = WriteOnceDict()\n        self['builders'] = WriteOnceDict()\n        self['schedulers'] = WriteOnceDict()\n\n        self.locks = WriteOnceDict()\n        self.codebases = WriteOnceDict()\n\n        self.dependencies = []\n        self.setup = setup\n\n\n    def register_dependency(self, dep):\n        self.dependencies.append(dep)\n\n    def __call__(self):\n        name = self.setup.__module__.split('.')[-1] if self.setup else 'None'\n        print(name,'pre-dep locks:',self.locks)\n        for d in self.dependencies:\n            d.locks.update(self.locks)\n            d()\n            self.codebases.update(d.codebases)\n            for k in self:\n                self[k].update(d[k])\n        dep_sched = [self['schedulers'][s].name for s in self['schedulers'] if self['schedulers'][s].__class__.__name__ == 'Triggerable']\n        dep_builders = set(self['builders'])\n\n        if self.setup:\n            print(name,'pre-setup locks:',self.locks)\n            self.setup(self)\n\n        # for any new factory made by setup, add dependency trigger\n        if dep_sched:\n            for b in self['builders']:\n                if b not in dep_builders:\n                    self['builders'][b].factory.addStep(steps.Trigger(\n                        schedulerNames=dep_sched\n                    ))\n",
        "cvmfs.py": "\"\"\"from __future__ import print_function\n\nimport os\nimport json\n\nfrom buildbot.plugins import *\n\nfrom . import Config\n\n__all__ = ['config']\n\nprefix = __file__.split('/')[-1].rsplit('.',1)[0]\n\nworker_cfgs {\n    'cvmfs-RHEL_7': 'worker-cvmfs-centos7-build',\n}\n\n\ndef setup(cfg):\n    return\n\n    ####### WORKERS\n\n    # The 'workers' list defines the set of recognized workers. Each element is\n    # a Worker object, specifying a unique worker name and password.  The same\n    # worker name and password must be configured on the worker.\n    for name in worker_cfgs:\n        cfg['workers'][prefix+name] = worker.Worker(\n            name, os.environ['WORKER_PASSWORD'],\n            max_builds=1,\n        )\n\n\n    ####### CHANGESOURCES\n\n\n    ####### BUILDERS\n\n    cfg.locks['cvmfs_lock'] = util.MasterLock('cvmfs_lock')\n\n    factory = util.BuildFactory()\n    # check out the source\n    factory.addStep(steps.Git(\n        repourl='git://github.com/WIPACrepo/cvmfs.git',\n        mode='full',\n        method='clobber',\n        codebase='cvmfs',\n    ))\n    factory.addStep(steps.ShellCommand(\n        command=[\n            'python','builders/build.py',\n            '--src','icecube.opensciencegrid.org',\n            '--dest','/cvmfs/icecube.opensciencegrid.org',\n            '--variant',util.Property('variant')\n        ],\n        locks=[\n            cfg.locks['cvmfs_lock'].access('exclusive'),\n        ],\n    ))\n\n    variants = {'py2_v2_base'}\n\n    for v in variants:\n        for name in worker_cfgs:\n            cfg['builders'][prefix+name+'-'+v] = util.BuilderConfig(\n                name=prefix+name+'-'+v,\n                workername=prefix+name,\n                factory=factory,\n                properties={'variant':v},\n            )\n\n\n    ####### SCHEDULERS\n\n\n\nconfig = Config(setup)\"\"\"",
        "iceprod_integrationtest.py": "from __future__ import print_function\n\nimport os\nimport json\n\nfrom buildbot.plugins import *\n\nfrom . import Config, get_os\n\n# depends on icperod_setup\nfrom .iceprod_setup import config as iceprod_setup_config\n\n\nprefix = __file__.split('/')[-1].rsplit('.',1)[0]\n\n\ndef setup(cfg):\n\n    ####### WORKERS\n\n    workername = 'iceprod-condor-centos7'\n    cfg['workers'][prefix+'_worker'] = worker.Worker(\n        workername, os.environ['WORKER_PASSWORD'],\n        max_builds=1,\n    )\n\n\n    ####### CHANGESOURCES\n\n\n    ####### BUILDERS\n\n    path = '/shared/iceprod'\n\n    factory = util.BuildFactory()\n    # start iceprod server\n    factory.addStep(steps.Git(\n        repourl='git://github.com/WIPACrepo/iceprod.git',\n        mode='full',\n        method='clobber',\n        codebase='iceprod',\n    ))\n    factory.addStep(steps.ShellCommand(\n        name='integration test',\n        command=[\n            os.path.join(path,'iceprod/master/env-shell.sh'),\n            'python','-m','integration_tests',\n        ],\n        locks=[\n            cfg.locks['gpu'].access('counting'),\n        ],\n    ))\n\n    cfg['builders'][prefix+'_builder'] = util.BuilderConfig(\n        name=prefix+'_builder',\n        workername=workername,\n        factory=factory,\n        properties={},\n    )\n\n\n    ####### SCHEDULERS\n\n    cfg['schedulers'][prefix+'-dep'] = schedulers.Triggerable(\n        name=prefix+'-dep',\n        codebases=['iceprod'],\n        builderNames=[prefix+'_builder'],\n    )\n\n# a fully dependent config\nconfig = None\niceprod_setup_config.register_dependency(Config(setup))\n",
        "iceprod_setup.py": "from __future__ import print_function\n\nimport os\nimport json\n\nfrom buildbot.plugins import *\n\nfrom . import Config, get_os\n\n\nprefix = __file__.split('/')[-1].rsplit('.',1)[0]\n\n\ndef setup(cfg):\n\n    ####### WORKERS\n\n    workername = 'iceprod-centos7-build'\n    cfg['workers'][workername] = worker.Worker(\n        workername, os.environ['WORKER_PASSWORD'],\n        max_builds=1,\n    )\n\n\n    ####### CHANGESOURCES\n\n    cfg['change_source']['iceprod'] = changes.GitPoller(\n        'git://github.com/WIPACrepo/iceprod.git',\n        workdir=prefix+'-iceprod-gitpoller-workdir', branch='master',\n        category=prefix, project='iceprod',\n        pollinterval=300,\n    )\n    cfg.codebases['iceprod'] = 'git://github.com/WIPACrepo/iceprod.git'\n\n    cfg['change_source']['cvmfs'] = changes.GitPoller(\n        'git://github.com/WIPACrepo/cvmfs.git',\n        workdir=prefix+'-cvmfs-gitpoller-workdir', branch='master',\n        category=prefix, project='cvmfs',\n        pollinterval=300,\n    )\n    cfg.codebases['cvmfs'] = 'git://github.com/WIPACrepo/cvmfs.git'\n\n\n    ####### BUILDERS\n\n    path = '/shared/iceprod'\n\n    factory = util.BuildFactory()\n    # clean everything\n    factory.addStep(steps.RemoveDirectory(name='clean build', dir=\"build\"))\n    factory.addStep(steps.MakeDirectory(name='mkdir build', dir=\"build\"))\n    factory.addStep(steps.RemoveDirectory(name='clean cvmfs', dir=path))\n    factory.addStep(steps.MakeDirectory(name='mkdir cvmfs', dir=path))\n    # build iceprod\n    factory.addStep(steps.Git(\n        repourl='git://github.com/WIPACrepo/cvmfs.git',\n        mode='full',\n        method='clobber',\n        workdir='build',\n    ))\n    factory.addStep(steps.ShellCommand(\n        name='build cvmfs',\n        command=[\n            'python', 'builders/build.py',\n            '--src', 'icecube.opensciencegrid.org',\n            '--dest', path,\n            '--variant', 'iceprod',\n            '--version', 'master',\n            '--debug',\n        ],\n        workdir='build',\n        haltOnFailure=True,\n        locks=[\n        ],\n    ))\n\n    cfg['builders'][prefix+'_builder'] = util.BuilderConfig(\n        name=prefix+'_builder',\n        workername=workername,\n        factory=factory,\n        properties={},\n    )\n\n    nonbuild_factory = util.BuildFactory()\n    cfg['builders'][prefix+'_nonbuild_builder'] = util.BuilderConfig(\n        name=prefix+'_nonbuild_builder',\n        workername=workername,\n        factory=nonbuild_factory,\n        properties={},\n    )\n\n\n    ####### SCHEDULERS\n\n    def isImportant(change):\n        if not os.listdir(path):\n            return True # needs rebuilding\n        if change.project == 'cvmfs':\n            include = ['iceprod']\n        elif change.project == 'iceprod':\n            include = ['setup.cfg','setup.py','requirements.txt']\n        else:\n            return True\n        for f in change.files:\n            if f in include:\n                return True\n        return False\n\n    cfg['schedulers'][prefix] = schedulers.SingleBranchScheduler(\n        name=prefix,\n        change_filter=util.ChangeFilter(category=prefix),\n        codebases=['iceprod','cvmfs'],\n        fileIsImportant=isImportant,\n        treeStableTimer=None,\n        builderNames=[prefix+'_builder'],\n    )\n    cfg['schedulers']['iceprod'] = schedulers.SingleBranchScheduler(\n        name='iceprod',\n        change_filter=util.ChangeFilter(category=prefix),\n        codebases=['iceprod','cvmfs'],\n        fileIsImportant=lambda x:not isImportant(x),\n        treeStableTimer=None,\n        builderNames=[prefix+'_nonbuild_builder'],\n    )\n\nconfig = Config(setup)\n",
        "iceprod_unittest.py": "from __future__ import print_function\n\nimport os\nimport json\n\nfrom buildbot.plugins import *\n\nfrom . import Config, get_os\n\n# depends on icperod_setup\nfrom .iceprod_setup import config as iceprod_setup_config\n\n\nprefix = __file__.split('/')[-1].rsplit('.',1)[0]\n\n\ndef setup(cfg):\n\n    ####### WORKERS\n\n    workername = 'iceprod-centos7'\n    cfg['workers'][workername] = worker.Worker(\n        workername, os.environ['WORKER_PASSWORD'],\n        max_builds=1,\n    )\n\n\n    ####### CHANGESOURCES\n\n\n    ####### BUILDERS\n\n    cvmfs_path = '/shared/iceprod'\n    coverage_path = '/shared/coverage'\n\n    factory = util.BuildFactory()\n    # start iceprod server\n    factory.addStep(steps.Git(\n        repourl='git://github.com/WIPACrepo/iceprod.git',\n        mode='full',\n        method='clobber',\n        codebase='iceprod',\n    ))\n    factory.addStep(steps.ShellCommand(\n        name='unittest',\n        command=[\n            os.path.join(cvmfs_path,'iceprod/master/env-shell.sh'),\n            './coverage.sh','--core','--server',\n        ],\n        locks=[\n        ],\n    ))\n    factory.addStep(steps.ShellSequence(\n        name='coverage',\n        commands=[\n            util.ShellArg(command=['cp','-r','htmlcov',coverage_path+'.tmp']),\n            util.ShellArg(command=['mv',coverage_path+'.tmp',coverage_path]),\n        ],\n        locks=[\n        ],\n    ))\n\n    cfg['builders'][prefix+'_builder'] = util.BuilderConfig(\n        name=prefix+'_builder',\n        workername=workername,\n        factory=factory,\n        properties={},\n    )\n\n    ####### SCHEDULERS\n\n    cfg['schedulers'][prefix+'-dep'] = schedulers.Triggerable(\n        name=prefix+'-dep',\n        codebases=['iceprod'],\n        builderNames=[prefix+'_builder'],\n    )\n\n# a fully dependent config\nconfig = None\niceprod_setup_config.register_dependency(Config(setup))\n"
    },
    "kind": "ConfigMap",
    "metadata": {
        "name": "buildbot-master.cfg.d"
    }
}